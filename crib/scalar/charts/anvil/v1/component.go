// Code generated by cribctl; DO NOT EDIT.
//
// File can be regenerated with:
//
//		cribctl helm create-component \
//	 	anvil \
//	     component-chart@https://charts.devspace.sh \
//	     --version=0.9.1 \
//	     --no-clobber
//
//lint:file-ignore ST1000,U1000 This file is generated by go generate.
package anvil

import (
	"context"
	"embed"
	"fmt"

	"github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2"
	"github.com/imdario/mergo"

	"github.com/smartcontractkit/crib-sdk/crib"
	"github.com/smartcontractkit/crib-sdk/crib/scalar/helmchart/v1"
	"github.com/smartcontractkit/crib-sdk/internal"
	"github.com/smartcontractkit/crib-sdk/internal/core/common/dry"
	"github.com/smartcontractkit/crib-sdk/internal/core/domain"
)

const (
	chartName      = "anvil"
	resourcePrefix = "sdk.HelmChart#anvil"
)

//go:embed chart.defaults.yaml
var defaults embed.FS

var chartDefaults *internal.ChartRef

func init() {
	var err error
	chartDefaults, err = internal.NewChartRef(defaults, "chart.defaults.yaml")
	if err != nil {
		panic(fmt.Errorf("unable to read values defaults for Helm Chart %q: %w", chartName, err))
	}
}

// Component creates a new anvil Helm Chart scalar component. The resulting [crib.Component] represents a full
// intent to deploy the "component-chart" Helm Chart to a Kubernetes cluster.
func Component(props crib.Props) crib.ComponentFunc {
	return func(ctx context.Context) (crib.Component, error) {
		chartProps := dry.As[*helmchart.ChartProps](props)
		if chartProps == nil && props != nil {
			return nil, fmt.Errorf("[%s] props must be of type *helmchart.ChartProps, got %T", chartName, props)
		}
		if chartProps.Values != nil && chartProps.ValuesLoader != nil {
			return nil, fmt.Errorf("[%s] props cannot have both Values and ValuesLoader set", chartName)
		}
		if chartProps.ValuesLoader != nil {
			values, err := chartProps.ValuesLoader.Values()
			if err != nil {
				return nil, fmt.Errorf("[%s] loading values: %w", chartName, err)
			}
			chartProps.Values = values
			chartProps.ValuesLoader = nil // Clear the loader to avoid confusion.
		}

		parent := internal.ConstructFromContext(ctx)
		chart := cdk8s.NewChart(parent, crib.ResourceID(resourcePrefix, props), nil)
		ctx = internal.ContextWithConstruct(ctx, chart)

		// Copy the values, merging the defaults with the provided values. User provided values
		// will override the defaults.
		values := make(map[string]any)
		// UPDATE: Use mergo to merge the values, overriding the defaults.
		mergo.Merge(&values, chartDefaults.Values, mergo.WithOverride)
		mergo.Merge(&values, chartProps.Values, mergo.WithOverride)

		// If the user provided values are empty, we use the defaults.
		if chartProps.Name == "" {
			chartProps.Name = chartDefaults.Chart.Name
		}
		if chartProps.Namespace == "" {
			chartProps.Namespace = domain.DefaultNamespace
		}
		// If the user provided values are empty, we use the defaults.
		if chartProps.Chart == "" {
			chartProps.Chart = chartDefaults.Chart.Name
		}
		if chartProps.ReleaseName == "" {
			chartProps.ReleaseName = chartDefaults.Chart.ReleaseName
		}
		if chartProps.Repo == "" {
			chartProps.Repo = chartDefaults.Chart.Repository
		}
		if chartProps.Version == "" {
			chartProps.Version = chartDefaults.Chart.Version
		}

		// TEMP: Apply the values patches.
		for _, patch := range chartProps.ValuesPatches {
			values = internal.SetValueAtPath(values, patch[0], patch[1])
		}

		return helmchart.New(ctx, &helmchart.ChartProps{
			// This is the name of the component, e.g. "nginx".
			// "anvil" is the name of this component.
			Name: chartProps.Name,
			// This is the chart name, e.g. "nginx".
			// "component-chart" is the name of this Helm Chart.
			Chart: chartProps.Chart,
			// This is the namespace where the chart will be deployed.
			Namespace: chartProps.Namespace,
			// This is the release name for the Helm Chart.
			// "anvil" is the release name for this Helm Chart.
			ReleaseName: chartProps.ReleaseName,
			// This is the repository where the Helm Chart is located.
			// "https://charts.devspace.sh" is the repository for this Helm Chart.
			Repo:   chartProps.Repo,
			Values: values,
			// This is the version of the Helm Chart.
			// "0.9.1" is the version of this Helm Chart.
			Version: chartProps.Version,
			// This is the flags to pass to the Helm Chart.
			// ["--skip-tests"] is the flags to pass to this Helm Chart.
			Flags:   chartProps.Flags,
		})
	}
}
