// Code generated by cribctl; DO NOT EDIT.
//
// File can be regenerated with:
//
//	cribctl helm create-component \
//	    telepresence \
//	    telepresence-oss@oci://ghcr.io/telepresenceio/telepresence-oss \
//	    --version=2.23.3 \
//	    --no-clobber
//
//lint:file-ignore ST1000,U1000 This file is generated by go generate.
package telepresence

import (
	"bytes"
	"errors"
	"io"
	"iter"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"gopkg.in/yaml.v3"

	"github.com/smartcontractkit/crib-sdk/crib/scalar/helmchart/v1"
	"github.com/smartcontractkit/crib-sdk/internal"
)

func TestChartComponent_telepresence(t *testing.T) {
	if testing.Short() {
		t.Skip("Skipping test in short mode.")
	}
	t.Parallel()
	ctx := t.Context()
	must := require.New(t)

	loader, err := internal.NewHelmValuesLoader(ctx, "testdata/values.yaml")
	if err != nil {
		t.Logf("[Important] Unable to run tests for HelmChart %s, the required test data is missing.", chartName)
		t.SkipNow()
	}

	app := internal.NewTestApp(t)
	ctx = internal.ContextWithConstruct(ctx, app.Chart)
	props := &helmchart.ChartProps{
		Namespace:    "test-ns-" + chartName,
		ValuesLoader: loader,
	}

	component, err := Component(props)(ctx)
	must.NoError(err)
	must.NotNil(component)

	raw := *app.SynthYaml()
	for manifest := range unmarshalManifests(t, []byte(raw)) {
		_, err = yaml.Marshal(manifest)
		assert.NoError(t, err)
	}
}

type genericManifest map[string]any

func unmarshalManifests(t *testing.T, raw []byte) iter.Seq[genericManifest] {
	t.Helper()

	dec := yaml.NewDecoder(bytes.NewReader(raw))
	return func(yield func(genericManifest) bool) {
		for {
			var doc genericManifest
			if err := dec.Decode(&doc); err != nil {
				if errors.Is(err, io.EOF) {
					break // End of file reached.
				}
				assert.NoError(t, err, "Failed to decode YAML document")
				continue // Skip to the next document on error.
			}
			if !yield(doc) {
				return
			}
		}
	}
}
