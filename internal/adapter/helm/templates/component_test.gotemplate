// Code generated by cribctl; DO NOT EDIT.
//
// File can be regenerated with:
//
//  cribctl helm create-component \
//      {{ .Release.ReleaseName }} \
//      {{ .Release.Name }}@{{ .Release.Repository }} \
//      --version={{ .Release.Version }} \
//      --no-clobber
//
//lint:file-ignore ST1000,U1000 This file is generated by go generate.
package {{ .PackageName }}

import (
	"bytes"
	"errors"
	"io"
	"iter"
    "testing"

	"github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
	"gopkg.in/yaml.v3"

    "github.com/smartcontractkit/crib-sdk/crib/scalar/helmchart/v1"
    "github.com/smartcontractkit/crib-sdk/internal"
)

func {{ printf "TestChartComponent_%s" .PackageName }}(t *testing.T) {
    if testing.Short() {
        t.Skip("Skipping test in short mode.")
    }
    t.Parallel()
    must := require.New(t)
	app := internal.NewTestApp(t)

	loader, err := internal.NewHelmValuesLoader(app.Context(), "testdata/values.yaml")
	if err != nil {
		t.Logf("[Important] Unable to run tests for HelmChart %s, the required test data is missing.", chartName)
		t.SkipNow()
	}

    props := &helmchart.ChartProps{
        Namespace: "test-ns-" + chartName,
		ValuesLoader: loader,
    }

    component, err := Component(props)(app.Context())
    must.NoError(err)
    must.NotNil(component)

	raw := *app.DisableSnapshots().SynthYaml()
	for manifest := range unmarshalManifests(t, []byte(raw)) {
		_, err = yaml.Marshal(manifest)
		assert.NoError(t, err)
	}
}

type genericManifest map[string]any

func unmarshalManifests(t *testing.T, raw []byte) iter.Seq[genericManifest] {
	t.Helper()

	dec := yaml.NewDecoder(bytes.NewReader(raw))
	return func(yield func(genericManifest) bool) {
		for {
            var doc genericManifest
            if err := dec.Decode(&doc); err != nil {
                if errors.Is(err, io.EOF) {
					break // End of file reached.
                }
                assert.NoError(t, err, "Failed to decode YAML document")
				continue // Skip to the next document on error.
            }
			if !yield(doc) {
                return
            }
        }
	}
}
