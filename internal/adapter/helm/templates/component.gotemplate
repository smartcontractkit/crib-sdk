// Code generated by cribctl; DO NOT EDIT.
//
// File can be regenerated with:
//
//  cribctl helm create-component \
//      {{ .Release.ReleaseName }} \
//      {{ .Release.Name }}@{{ .Release.Repository }} \
//      --version={{ .Release.Version }} \
//      --no-clobber
//
//lint:file-ignore ST1000,U1000 This file is generated by go generate.
package {{ .PackageName }}

import (
	"context"
	"embed"
	"fmt"
	"maps"

	"github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2"

	"github.com/smartcontractkit/crib-sdk/crib"
	"github.com/smartcontractkit/crib-sdk/crib/scalar/helmchart/v1"
	"github.com/smartcontractkit/crib-sdk/internal"
	"github.com/smartcontractkit/crib-sdk/internal/core/common/dry"
	"github.com/smartcontractkit/crib-sdk/internal/core/domain"
)

const (
	chartName = "{{ .Release.ReleaseName }}"
	resourcePrefix = "{{ printf "sdk.HelmChart#%s" .Release.ReleaseName }}"
)

//go:embed {{ .DefaultsFile }}
var defaults embed.FS

var chartDefaults *internal.ChartRef

func init() {
	var err error
	chartDefaults, err = internal.NewChartRef(defaults, "{{ .DefaultsFile }}")
	if err != nil {
		panic(fmt.Errorf("unable to read values defaults for Helm Chart %q: %w", chartName, err))
	}
}

// Component creates a new {{ .Release.ReleaseName }} Helm Chart scalar component. The resulting [crib.Component] represents a full
// intent to deploy the {{ .Release.Name | quote }} Helm Chart to a Kubernetes cluster.
func Component(props crib.Props) crib.ComponentFunc {
    return func(ctx context.Context) (crib.Component, error) {
        chartProps := dry.As[*helmchart.ChartProps](props)
        if chartProps == nil && props != nil {
            return nil, fmt.Errorf("[%s] props must be of type *helmchart.ChartProps, got %T", chartName, props)
        }
		if chartProps.Values != nil && chartProps.ValuesLoader != nil {
			return nil, fmt.Errorf("[%s] props cannot have both Values and ValuesLoader set", chartName)
		}
        if chartProps.ValuesLoader != nil {
            values, err := chartProps.ValuesLoader.Values()
            if err != nil {
                return nil, fmt.Errorf("[%s] loading values: %w", chartName, err)
            }
            chartProps.Values = values
			chartProps.ValuesLoader = nil // Clear the loader to avoid confusion.
        }

        parent := internal.ConstructFromContext(ctx)
        chart := cdk8s.NewChart(parent, crib.ResourceID(resourcePrefix, props), nil)
        ctx = internal.ContextWithConstruct(ctx, chart)

        // Copy the values, merging the defaults with the provided values. User provided values
		// will override the defaults.
        values := make(map[string]any)
        maps.Copy(values, chartDefaults.Values)
        maps.Copy(values, chartProps.Values)

        // If the user provided values are empty, we use the defaults.
		if chartProps.Name == "" {
		    chartProps.Name = chartDefaults.Chart.Name
		}
        if chartProps.Namespace == "" {
            chartProps.Namespace = domain.DefaultNamespace
        }
        // If the user provided values are empty, we use the defaults.
		if chartProps.Chart == "" {
            chartProps.Chart = chartDefaults.Chart.Name
        }
        if chartProps.ReleaseName == "" {
            chartProps.ReleaseName = chartDefaults.Chart.ReleaseName
        }
        if chartProps.Repo == "" {
            chartProps.Repo = chartDefaults.Chart.Repository
        }
        if chartProps.Version == "" {
            chartProps.Version = chartDefaults.Chart.Version
        }

        return helmchart.New(ctx, &helmchart.ChartProps{
			// This is the name of the component, e.g. "nginx".
			// {{ .Release.ReleaseName | quote }} is the name of this component.
			Name:        chartProps.Name,
			// This is the chart name, e.g. "nginx".
			// {{ .Release.Name | quote }} is the name of this Helm Chart.
            Chart:       chartProps.Chart,
			// This is the namespace where the chart will be deployed.
            Namespace:   chartProps.Namespace,
			// This is the release name for the Helm Chart.
            // {{ .Release.ReleaseName | quote }} is the release name for this Helm Chart.
            ReleaseName: chartProps.ReleaseName,
            // This is the repository where the Helm Chart is located.
            // {{ .Release.Repository | quote }} is the repository for this Helm Chart.
			Repo:        chartProps.Repo,
            Values:      values,
			// This is the version of the Helm Chart.
			// {{ .Release.Version | quote }} is the version of this Helm Chart.
            Version:     chartProps.Version,
            // This is the flags to pass to the Helm Chart.
			// ["--skip-tests"] is the flags to pass to this Helm Chart.
			Flags:   chartProps.Flags,
        })
    }
}
