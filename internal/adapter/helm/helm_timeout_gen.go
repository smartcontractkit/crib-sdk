// Code generated by gowrap. DO NOT EDIT.
// template: templates/timeout
// gowrap: http://github.com/hexdigest/gowrap

package helm

import (
	"context"
	"time"

	"github.com/smartcontractkit/crib-sdk/internal/core/domain"
	_sourcePort "github.com/smartcontractkit/crib-sdk/internal/core/port"
)

// HelmClientWithTimeout implements _sourcePort.HelmClient interface instrumented with timeouts
type HelmClientWithTimeout struct {
	_sourcePort.HelmClient
	config HelmClientWithTimeoutConfig
}

type HelmClientWithTimeoutConfig struct {
	AddRepoTimeout time.Duration

	CurrentVersionTimeout time.Duration

	LatestVersionTimeout time.Duration

	ListVersionsTimeout time.Duration

	PullRepoTimeout time.Duration

	TemplateRepoTimeout time.Duration

	UpdateRepoTimeout time.Duration

	VendorRepoTimeout time.Duration
}

// NewHelmClientWithTimeout returns HelmClientWithTimeout
func NewHelmClientWithTimeout(base _sourcePort.HelmClient, config HelmClientWithTimeoutConfig) HelmClientWithTimeout {
	return HelmClientWithTimeout{
		HelmClient: base,
		config:     config,
	}
}

// AddRepo implements _sourcePort.HelmClient
func (_d HelmClientWithTimeout) AddRepo(ctx context.Context, release _sourcePort.ChartReleaser) (err error) {
	var cancelFunc func()
	if _d.config.AddRepoTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.AddRepoTimeout)
		defer cancelFunc()
	}
	return _d.HelmClient.AddRepo(ctx, release)
}

// CurrentVersion implements _sourcePort.HelmClient
func (_d HelmClientWithTimeout) CurrentVersion(ctx context.Context, release _sourcePort.ChartReleaser) (h1 domain.HelmChartVersion, err error) {
	var cancelFunc func()
	if _d.config.CurrentVersionTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.CurrentVersionTimeout)
		defer cancelFunc()
	}
	return _d.HelmClient.CurrentVersion(ctx, release)
}

// LatestVersion implements _sourcePort.HelmClient
func (_d HelmClientWithTimeout) LatestVersion(ctx context.Context, release _sourcePort.ChartReleaser) (h1 domain.HelmChartVersion, err error) {
	var cancelFunc func()
	if _d.config.LatestVersionTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.LatestVersionTimeout)
		defer cancelFunc()
	}
	return _d.HelmClient.LatestVersion(ctx, release)
}

// ListVersions implements _sourcePort.HelmClient
func (_d HelmClientWithTimeout) ListVersions(ctx context.Context, release _sourcePort.ChartReleaser) (h1 domain.HelmChartVersions, err error) {
	var cancelFunc func()
	if _d.config.ListVersionsTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.ListVersionsTimeout)
		defer cancelFunc()
	}
	return _d.HelmClient.ListVersions(ctx, release)
}

// PullRepo implements _sourcePort.HelmClient
func (_d HelmClientWithTimeout) PullRepo(ctx context.Context, release _sourcePort.ChartReleaser) (f1 _sourcePort.FileReader, err error) {
	var cancelFunc func()
	if _d.config.PullRepoTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.PullRepoTimeout)
		defer cancelFunc()
	}
	return _d.HelmClient.PullRepo(ctx, release)
}

// TemplateRepo implements _sourcePort.HelmClient
func (_d HelmClientWithTimeout) TemplateRepo(ctx context.Context, release _sourcePort.ChartReleaser, reader _sourcePort.FileReader) (ba1 []byte, err error) {
	var cancelFunc func()
	if _d.config.TemplateRepoTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.TemplateRepoTimeout)
		defer cancelFunc()
	}
	return _d.HelmClient.TemplateRepo(ctx, release, reader)
}

// UpdateRepo implements _sourcePort.HelmClient
func (_d HelmClientWithTimeout) UpdateRepo(ctx context.Context, release _sourcePort.ChartReleaser) (err error) {
	var cancelFunc func()
	if _d.config.UpdateRepoTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.UpdateRepoTimeout)
		defer cancelFunc()
	}
	return _d.HelmClient.UpdateRepo(ctx, release)
}

// VendorRepo implements _sourcePort.HelmClient
func (_d HelmClientWithTimeout) VendorRepo(ctx context.Context, release _sourcePort.ChartReleaser) (f1 _sourcePort.FileReader, err error) {
	var cancelFunc func()
	if _d.config.VendorRepoTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.VendorRepoTimeout)
		defer cancelFunc()
	}
	return _d.HelmClient.VendorRepo(ctx, release)
}
