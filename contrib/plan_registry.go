package contrib

import (
	"maps"
	"slices"

	"github.com/smartcontractkit/crib-sdk/crib"

	blockchainanvilv1 "github.com/smartcontractkit/crib-sdk/contrib/blockchain/anvil/v1"
	bootstrapawsv1 "github.com/smartcontractkit/crib-sdk/contrib/bootstrap/aws/v1"
	bootstrapkindv1 "github.com/smartcontractkit/crib-sdk/contrib/bootstrap/kind/v1"
	chainlinkjdv1 "github.com/smartcontractkit/crib-sdk/contrib/chainlink/jd/v1"
	chainlinknodev1 "github.com/smartcontractkit/crib-sdk/contrib/chainlink/node/v1"
	chainlinknodesetv1 "github.com/smartcontractkit/crib-sdk/contrib/chainlink/nodeset/v1"
	examplev1 "github.com/smartcontractkit/crib-sdk/contrib/example/v1"
	sbxblockchainanvilv1 "github.com/smartcontractkit/crib-sdk/contrib/sandbox/blockchain/anvil/v1"
	sbxblockchainaptosv1 "github.com/smartcontractkit/crib-sdk/contrib/sandbox/blockchain/aptos/v1"
	sbxchainlinkjdv1 "github.com/smartcontractkit/crib-sdk/contrib/sandbox/chainlink/jd/v1"
)

var (
	// planRegistry is a way to register plans with the CRIB-SDK.
	// Plan names must be globally unique to avoid collisions.
	// Future iterations of the SDK will provide this automatically.
	// The SDK will not know about the plans until they are registered here.
	planRegistry = []func() *crib.Plan{
		blockchainanvilv1.Plan,
		bootstrapawsv1.Plan,
		bootstrapkindv1.Plan,
		examplev1.Plan,
		chainlinkjdv1.Plan,
		chainlinknodev1.Plan,
		chainlinknodesetv1.Plan,
		sbxblockchainanvilv1.Plan,
		sbxblockchainaptosv1.Plan,
		sbxchainlinkjdv1.Plan,
	}

	// availablePlans is a map of plan name to plan function. This is
	// autogenerated by the SDK during initialization.
	availablePlans = make(map[string]func() *crib.Plan)
)

// Plan is a helper function to get a plan by name.
func Plan(name string) *crib.Plan {
	plan, ok := availablePlans[name]
	if !ok {
		panic("Plan " + name + " is not registered!")
	}
	return plan()
}

// Plans returns a list of all registered plans, sorted by name.
func Plans() []string {
	return slices.Sorted(maps.Keys(availablePlans))
}

func init() {
	for _, plan := range planRegistry {
		p := plan()
		// Panic if the plan name is empty.
		name := p.Name()
		if name == "" {
			panic("Plans must have their name populated!")
		}
		// Panic if the plan name is already registered.
		if _, ok := availablePlans[name]; ok {
			panic("Plan " + name + " has already been registered!")
		}
		availablePlans[name] = plan
	}
}
